version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: smarthome-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command: >
      postgres -c wal_level=logical -c max_wal_senders=1 -c max_replication_slots=1
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./smart_home/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres && psql -U postgres -d smarthome -c 'SELECT 1 FROM sensors'"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - smarthome-network

  postgres-device:
    image: postgres:16-alpine
    container_name: device-service-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_device_data:/var/lib/postgresql/data
      - ./DeviceService/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres && psql -U postgres -d device_db -c 'SELECT 1 FROM devices'"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - smarthome-network

  postgres-location:
    image: postgres:16-alpine
    container_name: location-service-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_location_data:/var/lib/postgresql/data
      - ./LocationService/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres && psql -U postgres -d location_db -c 'SELECT 1 FROM locations'"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - smarthome-network

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=smarthome
      - DOCKER_INFLUXDB_INIT_BUCKET=telemetry-bucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=a1b2c3d4e5f6789012345678901234567890abcd12345678901234567890abcd
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smarthome-network


  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - smarthome-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - smarthome-network

  connect:
    image: debezium/connect:2.4
    container_name: connect
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    networks:
      - smarthome-network

  temperature-api:
    build:
      context: ./DeviceTempApi
      dockerfile: Dockerfile
    container_name: temperature-api
    ports:
      - "8081:8081"
    networks:
      - smarthome-network
      
  app:
    build:
      context: ./smart_home
      dockerfile: Dockerfile
    container_name: smarthome-app
    depends_on:
      postgres:
        condition: service_healthy
      temperature-api:
        condition: service_started
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/smarthome
      - TEMPERATURE_API_URL=http://temperature-api:8081
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - smarthome-network

  device-service:
    build:
      context: ./DeviceService
      dockerfile: Dockerfile
    container_name: device-service-app
    depends_on:
      postgres-device:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-device:5432/device_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports:
      - "8090:8090"
    restart: unless-stopped
    networks:
      - smarthome-network

  location-service:
    build:
      context: ./LocationService
      dockerfile: Dockerfile
    container_name: location-service-app
    depends_on:
      postgres-location:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-location:5432/location_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports:
      - "8092:8092"
    restart: unless-stopped
    networks:
      - smarthome-network

  telemetry-service:
    build:
      context: ./TelemetryService
      dockerfile: Dockerfile
    container_name: telemetry-service
    depends_on:
      influxdb:
        condition: service_healthy
    environment:
      - SERVER_PORT=8091
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=a1b2c3d4e5f6789012345678901234567890abcd12345678901234567890abcd
      - INFLUXDB_ORG=smarthome
      - INFLUXDB_BUCKET=telemetry-bucket
    ports:
      - "8091:8091"
    restart: unless-stopped
    networks:
      - smarthome-network

  sensor-sync-adapter:
    build:
      context: ./SensorSyncAdapter
      dockerfile: Dockerfile
    container_name: sensor-sync-adapter
    depends_on:
      kafka:
        condition: service_started
      connect:
        condition: service_started
      location-service:
        condition: service_started
      device-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - smarthome-network

volumes:
  postgres_data:
  postgres_device_data: 
  postgres_location_data: 
  influxdb_data:

networks:
  smarthome-network:
    driver: bridge